generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  gestor
  voluntario
  cultivador
}

enum DiaSemana {
  DOM
  SEG
  TER
  QUA
  QUI
  SEX
  SAB
}

enum EHorta {
  escolar
  comunitaria
  institucional
  ong
}

model Usuario {
  id         String  @id @default(uuid())
  nome       String?
  username   String
  email      String  @unique
  senhaHash      String
  endereco   String?
  telefone   String?
  role       Role    @default(cultivador)
  pictureUrl String?
  onBoarding Boolean @default(false)

  familiaId      String?
  familiasMembro Familia?  @relation(name: "UsuarioFamilia", fields: [familiaId], references: [id])
  familiasGestor Familia[] @relation("GestorFamilia") // usuário como gestor de famílias
  hortasGestor   Horta[]   @relation("GestorHortas")

  PerfilGestor     PerfilGestor?
  Disponibilidade  Disponibilidade?
  PerfilVoluntario PerfilVoluntario?
  PerfilCultivador PerfilCultivador?
  PerfilAdmin      PerfilAdmin?
  Notificacao      Notificacao[]
  Log              Log[]

  updatedAt DateTime @updatedAt

}

model PerfilGestor {
  id                   String  @id @default(uuid())
  usuarioId            String  @unique
  usuario              Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  cargo                String? // exemplo: "Gestor Regional"
  recebeAlertas        Boolean @default(true)
  organizacaoVinculada String //Nome da ONG/Grupo/ ou Iniciativa responsavel
  observacoes          String?
}

model Disponibilidade {
  id                 String            @id @default(uuid())
  usuarioId          String            @unique
  usuario            Usuario           @relation(fields: [usuarioId], references: [id])
  diaSemana          DiaSemana
  horarioIni         DateTime // formato HH:mm, por simplicidade
  horarioFim         DateTime  // formato HH:mm
  PerfilVoluntario   PerfilVoluntario? @relation(fields: [perfilVoluntarioId], references: [id])
  perfilVoluntarioId String?
}

model PerfilVoluntario {
  id              String            @id @default(uuid())
  usuarioId       String            @unique
  usuario         Usuario           @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  interesse       String? // ex: "Irrigação", "Organização"
  disponivel      Boolean           @default(true)
  disponibilidade Disponibilidade[]
  observacoes     String?
}

model PerfilCultivador {
  id               String  @id @default(uuid())
  usuarioId        String  @unique
  usuario          Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  tipoExperiencia  String? // "iniciante", "experiente", etc.
  habilidades      String?
  plantasFavoritas String?
  observacoes      String?
}

model PerfilAdmin {
  id          String  @id @unique
  cargo       String
  ativo       Boolean
  observacoes String?

  usuarioId String  @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model Familia {
  id            String    @id @default(uuid())
  nome          String
  representante String
  descricao     String?
  qtdMembros    Int
  gestorId      String
  membros       Usuario[] @relation(name: "UsuarioFamilia")
  hortas        Horta[]   @relation("HortasFamilia")
  avisos        Aviso[]

  gestor Usuario? @relation("GestorFamilia", fields: [gestorId], references: [id])
}

model Horta {
  id            String  @id @default(uuid())
  nome          String
  endereco      String
  cordenada     String
  areaCultivada Decimal
  tipoSolo      String
  tipoHorta     EHorta
  descricao     String?
  observacoes   String?

  gestorId String?
  gestor   Usuario? @relation("GestorHortas", fields: [gestorId], references: [id])

  familiaId String?
  familia   Familia? @relation("HortasFamilia", fields: [familiaId], references: [id])

  plantios Plantio[]
}

model Plantio {
  id                 String    @id @default(uuid())
  cultura            String
  tipoPlantacao      String // Tipo do plantio (ex: orgânico, convencional, hidropônico)
  dataInicio         DateTime // Data de início do plantio
  previsaoColheita   DateTime // Previsão de quando a colheita deve ocorrer
  dataColheita       DateTime? // Data real da colheita (opcional, pois pode ainda não ter ocorrido)
  quantidadePlantada Decimal // Quantidade plantada (ex: 10.5)
  unidadeMedida      String // Unidade da quantidade (ex: kg, unidades, m²)
  observacoes        String? // Campo opcional para anotações ou observações extras

  // Relações
  hortaId    String
  colheitaId String?   @unique
  horta      Horta     @relation(fields: [hortaId], references: [id], onDelete: Cascade)
  colheita   Colheita?
}

model Colheita {
  id                String   @id @default(uuid())
  cultura           String // Nome da cultura colhida (ex: alface, cenoura)
  dataColheita      DateTime @default(now()) // Data em que a colheita foi realizada
  quantidadeColhida Decimal // Quantidade colhida
  unidadeMedida     String // Unidade da quantidade (ex: kg, maços, unidades)
  destinoColheita   String // Destino da colheita (ex: consumo, doação, venda)
  observacoes       String? // Comentários ou anotações adicionais

  // Relacionamentos
  plantioId String  @unique // Chave estrangeira e única (relação 1-1)
  plantio   Plantio @relation(fields: [plantioId], references: [id], onDelete: Cascade)
}

model Aviso {
  id         String   @id @default(uuid())
  titulo     String
  descricao  String
  dataEvento DateTime
  familiaId  String
  familia    Familia  @relation(fields: [familiaId], references: [id])

  updatedAt DateTime @updatedAt

}

model Notificacao {
  id        String   @id @default(uuid())
  usuarioId String
  titulo    String
  mensagem  String
  lida      Boolean  @default(false)
  createdAt DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  usuarioId String
  acao      String
  contexto  String?
  data      DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Faq {
  id        String   @id @default(uuid())
  pergunta  String
  resposta  String
  categoria String? // Ex: "plantio", "sistema", "comunidade"
  ordem     Int? // Para controle de exibição ordenada
  criadoEm  DateTime @default(now())

  updatedAt DateTime @updatedAt

}
