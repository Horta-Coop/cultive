generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUser {
  ADMIN
  GERENTE
  FAMILIA
}

enum EHorta {
  ESCOLAR
  COMUNITARIA
  INSTITUCIONAL
  ONG
}

model Teste {
  id        String   @id @default(uuid())
  nome      String
  descricao String?
  telefone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Usuario {
  id           String  @id @unique @default(uuid())
  nomeCompleto String?
  email        String  @unique
  senhaHash    String
  foto         String?
  telefone     String?
  tipo         EUser
  onBoarding   Boolean @default(false)

  dataAdesao DateTime @default(now())
  updatedAt  DateTime @updatedAt

  familia Familia?
  gerente Gerente?
  admin   Admin?
}

model Familia {
  familiaId     String   @id @unique
  nomeGrupo     String
  representante String
  habilidades   String?
  qtdMembros    Int
  gerenteId     String
  observacoes   String?
  dataAdesao    DateTime @default(now())
  updatedAt     DateTime @updatedAt

  horta Horta[]

  usuario Usuario @relation(fields: [familiaId], references: [id], onDelete: Cascade)
  gerente Gerente @relation(fields: [gerenteId], references: [gerenteId])
}

model Gerente {
  gerenteId           String   @id @unique
  cargo               String
  entidadeResponsavel String //Nome da ONG/Grupo/ ou Iniciativa responsavel
  observacoes         String?
  data_adesao         DateTime @default(now())

  usuario Usuario   @relation(fields: [gerenteId], references: [id], onDelete: Cascade)
  familia Familia[]
}

model Admin {
  adminId     String   @id @unique
  cargo       String
  ativo       Boolean
  observacoes String?
  dataAdesao  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuario Usuario @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Horta {
  hortaId           String   @id @default(uuid())
  nomeHorta         String
  enderecoHorta     String
  cordenadaGpsHorta String
  areaCultivada     Decimal
  tipoSolo          String
  tipoHorta         EHorta
  observacoes       String?
  familiaId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  plantio Plantio[]
  familia Familia   @relation(fields: [familiaId], references: [familiaId], onDelete: Cascade)
}

model Plantio {
  plantioId          String   @id @default(uuid())
  culturaPlantio     String
  tipoPlantacao      String
  dataPlantio        DateTime @default(now())
  previsaoColheita   DateTime
  tipoManejo         String
  quantidadePlantada Decimal
  unidadeMedida      String
  observacoes        String?
  hortaId            String
  colheitaId         String?  @unique // chave estrangeira opcional para relação 1-1
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  horta    Horta     @relation(fields: [hortaId], references: [hortaId], onDelete: Cascade)
  colheita Colheita?
}

model Colheita {
  colheitaId        String   @id @default(uuid())
  culturaColheita   String
  dataColheita      DateTime @default(now())
  quantidadeColhida Decimal
  unidadeMedida     String
  destinoColheita   String
  plantioId         String   @unique
  familiaId         String?
  observacoes       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  plantio Plantio @relation(fields: [plantioId], references: [plantioId], onDelete: Cascade)
}
